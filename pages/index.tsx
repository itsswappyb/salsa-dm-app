import Card from "@/components/Card";
import Tabs from "@/components/Tabs";
import { Message, User } from "@prisma/client";
import Head from "next/head";
import Script from "next/script";
import { useEffect, useState } from "react";
import prisma from "@/lib/prisma";
import Form from "@/components/Form";

export async function getServerSideProps() {
  try {
    const user: User | null = await prisma.user.findFirst();
    const recipient: User | null = await prisma.user.findUnique({
      where: { id: 2 },
    });

    if (user) {
      return {
        props: {
          user,
          recipient,
        },
      };
    }
    return {
      props: {},
    };
  } catch (err: any) {
    console.error(err);
  }
}

type Props = {
  user: User;
  recipient: User;
};

export default function Home({ user, recipient }: Props) {
  console.log("user in home: ", user);
  const [messages, setMessages] = useState<Message[] | null>(null);

  console.log("userId: ", user.id);

  console.log("messages: ", messages);

  // TODO: use useSWR or React Query instead
  useEffect(() => {
    const getMessages = async (): Promise<Message[]> => {
      const response = await fetch(`api/messages/?senderId=${user.id}`);
      const data = await response.json();
      setMessages(data.data);
      return data;
    };

    getMessages();
  }, []);

  return (
    <div>
      <Head>
        <title>DM- App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className="flex h-screen flex-col bg-gradient-to-b from-gray-900 to-slate-800 text-white">
        <header className="py-16">
          <h1 className="mb-6 text-center text-5xl font-bold">My DMz</h1>
        </header>

        <main className="flex-1">
          {/* @ts-ignore */}
          <section className="flex justify-center">
            {/* @ts-ignore */}
            <div>
              <Tabs
                labels={["All", "Accepted"]}
                className="mb-6 flex justify-center"
              />
              {messages?.map((message: Message, index: number) => (
                <Card content={message} user={user} recipient={recipient} />
              ))}
              {/* <Form recipientId={recipient.id} /> */}
            </div>

            <p className="text-white">{JSON.stringify(messages)}</p>
          </section>
        </main>

        <footer className="border-t border-gray-800 px-8 py-12">
          <div className="px-8 text-center font-medium">
            <a href="https://github.com/andrejjurkin/create-tw">
              Create Tailwind
            </a>
          </div>
        </footer>
      </div>
      {/* <Script src="https://buttons.github.io/buttons.js" /> */}
    </div>
  );
}
