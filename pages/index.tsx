import Card from "@/components/Card";
import Tabs from "@/components/Tabs";
import { Message, Status, User } from "@prisma/client";
import Head from "next/head";
import Script from "next/script";
import { useEffect, useState } from "react";
import prisma from "@/lib/prisma";
import Form from "@/components/Form";
import { Tab } from "@/types";

export async function getServerSideProps() {
  try {
    const user: User | null = await prisma.user.findFirst();
    const recipient: User | null = await prisma.user.findUnique({
      where: { id: 2 },
    });

    if (user) {
      return {
        props: {
          user,
          recipient,
        },
      };
    }
    return {
      props: {},
    };
  } catch (err: any) {
    console.error(err);
  }
}

type Props = {
  user: User;
  recipient: User;
};

export default function Home({ user, recipient }: Props) {
  const [messages, setMessages] = useState<Message[] | null>(null);
  const [selectedLabel, setSelectedLabel] = useState<Tab>("All");

  // TODO: use useSWR or React Query instead
  useEffect(() => {
    const getMessages = async (): Promise<Message[]> => {
      const response = await fetch(`api/messages/?senderId=${user.id}`);
      const data = await response.json();
      setMessages(data.data);
      return data;
    };

    getMessages();
  }, []);

  const acceptedMessages: Message[] | null =
    messages &&
    messages.filter(
      (message: Message, index: number) => message.status === "ACCEPTED",
    );

  return (
    <div>
      <Head>
        <title>DM- App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className="flex h-screen flex-col bg-gradient-to-b from-gray-900 to-slate-800 text-white">
        <header className="py-16">
          <h1 className="mb-6 text-center text-5xl font-bold">My DMz</h1>
        </header>

        <main className="flex-1">
          <section className="flex flex-col items-center justify-center">
            <Tabs
              labels={["All", "Accepted"]}
              selectedLabel={selectedLabel}
              setSelectedLabel={setSelectedLabel}
            />

            <div className="mt-12 h-[300px] overflow-scroll">
              {selectedLabel === "All" &&
                messages
                  ?.filter(
                    (message: Message, index: number) =>
                      message.status === "PENDING",
                  )
                  .map((message: Message, index: number) => (
                    <Card
                      content={message}
                      user={user}
                      recipient={recipient}
                      key={index}
                    />
                  ))}
              {selectedLabel === "Accepted" &&
                acceptedMessages?.map((message: Message, index: number) => (
                  <Card
                    content={message}
                    user={user}
                    recipient={recipient}
                    key={index}
                  />
                ))}
            </div>
          </section>
        </main>
      </div>
    </div>
  );
}
